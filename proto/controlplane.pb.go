// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: proto/controlplane.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServerRole int32

const (
	ServerRole_follower ServerRole = 0
	ServerRole_leader   ServerRole = 1
)

// Enum value maps for ServerRole.
var (
	ServerRole_name = map[int32]string{
		0: "follower",
		1: "leader",
	}
	ServerRole_value = map[string]int32{
		"follower": 0,
		"leader":   1,
	}
)

func (x ServerRole) Enum() *ServerRole {
	p := new(ServerRole)
	*p = x
	return p
}

func (x ServerRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerRole) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_controlplane_proto_enumTypes[0].Descriptor()
}

func (ServerRole) Type() protoreflect.EnumType {
	return &file_proto_controlplane_proto_enumTypes[0]
}

func (x ServerRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerRole.Descriptor instead.
func (ServerRole) EnumDescriptor() ([]byte, []int) {
	return file_proto_controlplane_proto_rawDescGZIP(), []int{0}
}

type FetchLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallerNodeName string `protobuf:"bytes,1,opt,name=callerNodeName,proto3" json:"callerNodeName,omitempty"`
	OffsetFrom     int64  `protobuf:"varint,2,opt,name=offsetFrom,proto3" json:"offsetFrom,omitempty"`
	Count          int64  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *FetchLogRequest) Reset() {
	*x = FetchLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_controlplane_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchLogRequest) ProtoMessage() {}

func (x *FetchLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_controlplane_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchLogRequest.ProtoReflect.Descriptor instead.
func (*FetchLogRequest) Descriptor() ([]byte, []int) {
	return file_proto_controlplane_proto_rawDescGZIP(), []int{0}
}

func (x *FetchLogRequest) GetCallerNodeName() string {
	if x != nil {
		return x.CallerNodeName
	}
	return ""
}

func (x *FetchLogRequest) GetOffsetFrom() int64 {
	if x != nil {
		return x.OffsetFrom
	}
	return 0
}

func (x *FetchLogRequest) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FetchLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     [][]byte      `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	LeaderHw int64         `protobuf:"varint,2,opt,name=leaderHw,proto3" json:"leaderHw,omitempty"`
	BaseResp *BaseResponse `protobuf:"bytes,255,opt,name=baseResp,proto3" json:"baseResp,omitempty"`
}

func (x *FetchLogResponse) Reset() {
	*x = FetchLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_controlplane_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchLogResponse) ProtoMessage() {}

func (x *FetchLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_controlplane_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchLogResponse.ProtoReflect.Descriptor instead.
func (*FetchLogResponse) Descriptor() ([]byte, []int) {
	return file_proto_controlplane_proto_rawDescGZIP(), []int{1}
}

func (x *FetchLogResponse) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FetchLogResponse) GetLeaderHw() int64 {
	if x != nil {
		return x.LeaderHw
	}
	return 0
}

func (x *FetchLogResponse) GetBaseResp() *BaseResponse {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

type RoleChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role ServerRole `protobuf:"varint,1,opt,name=role,proto3,enum=proto.ServerRole" json:"role,omitempty"`
}

func (x *RoleChangeRequest) Reset() {
	*x = RoleChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_controlplane_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleChangeRequest) ProtoMessage() {}

func (x *RoleChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_controlplane_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleChangeRequest.ProtoReflect.Descriptor instead.
func (*RoleChangeRequest) Descriptor() ([]byte, []int) {
	return file_proto_controlplane_proto_rawDescGZIP(), []int{2}
}

func (x *RoleChangeRequest) GetRole() ServerRole {
	if x != nil {
		return x.Role
	}
	return ServerRole_follower
}

type RoleChangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResp *BaseResponse `protobuf:"bytes,255,opt,name=baseResp,proto3" json:"baseResp,omitempty"`
}

func (x *RoleChangeResponse) Reset() {
	*x = RoleChangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_controlplane_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleChangeResponse) ProtoMessage() {}

func (x *RoleChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_controlplane_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleChangeResponse.ProtoReflect.Descriptor instead.
func (*RoleChangeResponse) Descriptor() ([]byte, []int) {
	return file_proto_controlplane_proto_rawDescGZIP(), []int{3}
}

func (x *RoleChangeResponse) GetBaseResp() *BaseResponse {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

type CollectOffsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CollectOffsetRequest) Reset() {
	*x = CollectOffsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_controlplane_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectOffsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectOffsetRequest) ProtoMessage() {}

func (x *CollectOffsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_controlplane_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectOffsetRequest.ProtoReflect.Descriptor instead.
func (*CollectOffsetRequest) Descriptor() ([]byte, []int) {
	return file_proto_controlplane_proto_rawDescGZIP(), []int{4}
}

type CollectOffsetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset   int64         `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	BaseResp *BaseResponse `protobuf:"bytes,255,opt,name=baseResp,proto3" json:"baseResp,omitempty"`
}

func (x *CollectOffsetResponse) Reset() {
	*x = CollectOffsetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_controlplane_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectOffsetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectOffsetResponse) ProtoMessage() {}

func (x *CollectOffsetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_controlplane_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectOffsetResponse.ProtoReflect.Descriptor instead.
func (*CollectOffsetResponse) Descriptor() ([]byte, []int) {
	return file_proto_controlplane_proto_rawDescGZIP(), []int{5}
}

func (x *CollectOffsetResponse) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *CollectOffsetResponse) GetBaseResp() *BaseResponse {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

type CollectWatermarkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CollectWatermarkRequest) Reset() {
	*x = CollectWatermarkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_controlplane_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectWatermarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectWatermarkRequest) ProtoMessage() {}

func (x *CollectWatermarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_controlplane_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectWatermarkRequest.ProtoReflect.Descriptor instead.
func (*CollectWatermarkRequest) Descriptor() ([]byte, []int) {
	return file_proto_controlplane_proto_rawDescGZIP(), []int{6}
}

type CollectWatermarkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hwm      int64         `protobuf:"varint,1,opt,name=hwm,proto3" json:"hwm,omitempty"`
	BaseResp *BaseResponse `protobuf:"bytes,255,opt,name=baseResp,proto3" json:"baseResp,omitempty"`
}

func (x *CollectWatermarkResponse) Reset() {
	*x = CollectWatermarkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_controlplane_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectWatermarkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectWatermarkResponse) ProtoMessage() {}

func (x *CollectWatermarkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_controlplane_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectWatermarkResponse.ProtoReflect.Descriptor instead.
func (*CollectWatermarkResponse) Descriptor() ([]byte, []int) {
	return file_proto_controlplane_proto_rawDescGZIP(), []int{7}
}

func (x *CollectWatermarkResponse) GetHwm() int64 {
	if x != nil {
		return x.Hwm
	}
	return 0
}

func (x *CollectWatermarkResponse) GetBaseResp() *BaseResponse {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

var File_proto_controlplane_proto protoreflect.FileDescriptor

var file_proto_controlplane_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x77, 0x12, 0x30, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3a, 0x0a, 0x11, 0x52, 0x6f,
	0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x46, 0x0a, 0x12, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x16,
	0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x18, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x68, 0x77, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x68,
	0x77, 0x6d, 0x12, 0x30, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x18, 0xff,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x2a, 0x26, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x01, 0x32, 0xbe, 0x02, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67,
	0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x08, 0x5a,
	0x06, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_controlplane_proto_rawDescOnce sync.Once
	file_proto_controlplane_proto_rawDescData = file_proto_controlplane_proto_rawDesc
)

func file_proto_controlplane_proto_rawDescGZIP() []byte {
	file_proto_controlplane_proto_rawDescOnce.Do(func() {
		file_proto_controlplane_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_controlplane_proto_rawDescData)
	})
	return file_proto_controlplane_proto_rawDescData
}

var file_proto_controlplane_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_controlplane_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_controlplane_proto_goTypes = []interface{}{
	(ServerRole)(0),                  // 0: proto.ServerRole
	(*FetchLogRequest)(nil),          // 1: proto.FetchLogRequest
	(*FetchLogResponse)(nil),         // 2: proto.FetchLogResponse
	(*RoleChangeRequest)(nil),        // 3: proto.RoleChangeRequest
	(*RoleChangeResponse)(nil),       // 4: proto.RoleChangeResponse
	(*CollectOffsetRequest)(nil),     // 5: proto.CollectOffsetRequest
	(*CollectOffsetResponse)(nil),    // 6: proto.CollectOffsetResponse
	(*CollectWatermarkRequest)(nil),  // 7: proto.CollectWatermarkRequest
	(*CollectWatermarkResponse)(nil), // 8: proto.CollectWatermarkResponse
	(*BaseResponse)(nil),             // 9: proto.BaseResponse
}
var file_proto_controlplane_proto_depIdxs = []int32{
	9, // 0: proto.FetchLogResponse.baseResp:type_name -> proto.BaseResponse
	0, // 1: proto.RoleChangeRequest.role:type_name -> proto.ServerRole
	9, // 2: proto.RoleChangeResponse.baseResp:type_name -> proto.BaseResponse
	9, // 3: proto.CollectOffsetResponse.baseResp:type_name -> proto.BaseResponse
	9, // 4: proto.CollectWatermarkResponse.baseResp:type_name -> proto.BaseResponse
	1, // 5: proto.ControlPlaneService.FetchLog:input_type -> proto.FetchLogRequest
	3, // 6: proto.ControlPlaneService.RoleChange:input_type -> proto.RoleChangeRequest
	5, // 7: proto.ControlPlaneService.CollectOffset:input_type -> proto.CollectOffsetRequest
	7, // 8: proto.ControlPlaneService.CollectWatermark:input_type -> proto.CollectWatermarkRequest
	2, // 9: proto.ControlPlaneService.FetchLog:output_type -> proto.FetchLogResponse
	4, // 10: proto.ControlPlaneService.RoleChange:output_type -> proto.RoleChangeResponse
	6, // 11: proto.ControlPlaneService.CollectOffset:output_type -> proto.CollectOffsetResponse
	8, // 12: proto.ControlPlaneService.CollectWatermark:output_type -> proto.CollectWatermarkResponse
	9, // [9:13] is the sub-list for method output_type
	5, // [5:9] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_controlplane_proto_init() }
func file_proto_controlplane_proto_init() {
	if File_proto_controlplane_proto != nil {
		return
	}
	file_proto_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_controlplane_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_controlplane_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_controlplane_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_controlplane_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleChangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_controlplane_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectOffsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_controlplane_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectOffsetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_controlplane_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectWatermarkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_controlplane_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectWatermarkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_controlplane_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_controlplane_proto_goTypes,
		DependencyIndexes: file_proto_controlplane_proto_depIdxs,
		EnumInfos:         file_proto_controlplane_proto_enumTypes,
		MessageInfos:      file_proto_controlplane_proto_msgTypes,
	}.Build()
	File_proto_controlplane_proto = out.File
	file_proto_controlplane_proto_rawDesc = nil
	file_proto_controlplane_proto_goTypes = nil
	file_proto_controlplane_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ControlPlaneServiceClient is the client API for ControlPlaneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControlPlaneServiceClient interface {
	FetchLog(ctx context.Context, in *FetchLogRequest, opts ...grpc.CallOption) (*FetchLogResponse, error)
	RoleChange(ctx context.Context, in *RoleChangeRequest, opts ...grpc.CallOption) (*RoleChangeResponse, error)
	CollectOffset(ctx context.Context, in *CollectOffsetRequest, opts ...grpc.CallOption) (*CollectOffsetResponse, error)
	CollectWatermark(ctx context.Context, in *CollectWatermarkRequest, opts ...grpc.CallOption) (*CollectWatermarkResponse, error)
}

type controlPlaneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControlPlaneServiceClient(cc grpc.ClientConnInterface) ControlPlaneServiceClient {
	return &controlPlaneServiceClient{cc}
}

func (c *controlPlaneServiceClient) FetchLog(ctx context.Context, in *FetchLogRequest, opts ...grpc.CallOption) (*FetchLogResponse, error) {
	out := new(FetchLogResponse)
	err := c.cc.Invoke(ctx, "/proto.ControlPlaneService/FetchLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) RoleChange(ctx context.Context, in *RoleChangeRequest, opts ...grpc.CallOption) (*RoleChangeResponse, error) {
	out := new(RoleChangeResponse)
	err := c.cc.Invoke(ctx, "/proto.ControlPlaneService/RoleChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) CollectOffset(ctx context.Context, in *CollectOffsetRequest, opts ...grpc.CallOption) (*CollectOffsetResponse, error) {
	out := new(CollectOffsetResponse)
	err := c.cc.Invoke(ctx, "/proto.ControlPlaneService/CollectOffset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneServiceClient) CollectWatermark(ctx context.Context, in *CollectWatermarkRequest, opts ...grpc.CallOption) (*CollectWatermarkResponse, error) {
	out := new(CollectWatermarkResponse)
	err := c.cc.Invoke(ctx, "/proto.ControlPlaneService/CollectWatermark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlPlaneServiceServer is the server API for ControlPlaneService service.
type ControlPlaneServiceServer interface {
	FetchLog(context.Context, *FetchLogRequest) (*FetchLogResponse, error)
	RoleChange(context.Context, *RoleChangeRequest) (*RoleChangeResponse, error)
	CollectOffset(context.Context, *CollectOffsetRequest) (*CollectOffsetResponse, error)
	CollectWatermark(context.Context, *CollectWatermarkRequest) (*CollectWatermarkResponse, error)
}

// UnimplementedControlPlaneServiceServer can be embedded to have forward compatible implementations.
type UnimplementedControlPlaneServiceServer struct {
}

func (*UnimplementedControlPlaneServiceServer) FetchLog(context.Context, *FetchLogRequest) (*FetchLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchLog not implemented")
}
func (*UnimplementedControlPlaneServiceServer) RoleChange(context.Context, *RoleChangeRequest) (*RoleChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleChange not implemented")
}
func (*UnimplementedControlPlaneServiceServer) CollectOffset(context.Context, *CollectOffsetRequest) (*CollectOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectOffset not implemented")
}
func (*UnimplementedControlPlaneServiceServer) CollectWatermark(context.Context, *CollectWatermarkRequest) (*CollectWatermarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectWatermark not implemented")
}

func RegisterControlPlaneServiceServer(s *grpc.Server, srv ControlPlaneServiceServer) {
	s.RegisterService(&_ControlPlaneService_serviceDesc, srv)
}

func _ControlPlaneService_FetchLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).FetchLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControlPlaneService/FetchLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).FetchLog(ctx, req.(*FetchLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_RoleChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).RoleChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControlPlaneService/RoleChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).RoleChange(ctx, req.(*RoleChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_CollectOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).CollectOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControlPlaneService/CollectOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).CollectOffset(ctx, req.(*CollectOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlaneService_CollectWatermark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectWatermarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServiceServer).CollectWatermark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControlPlaneService/CollectWatermark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServiceServer).CollectWatermark(ctx, req.(*CollectWatermarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControlPlaneService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ControlPlaneService",
	HandlerType: (*ControlPlaneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchLog",
			Handler:    _ControlPlaneService_FetchLog_Handler,
		},
		{
			MethodName: "RoleChange",
			Handler:    _ControlPlaneService_RoleChange_Handler,
		},
		{
			MethodName: "CollectOffset",
			Handler:    _ControlPlaneService_CollectOffset_Handler,
		},
		{
			MethodName: "CollectWatermark",
			Handler:    _ControlPlaneService_CollectWatermark_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/controlplane.proto",
}
